// Importation des constantes ENDPOINTS depuis le fichier config-api.js
import { ENDPOINTS } from '../config-api.js';

document.addEventListener('DOMContentLoaded', () => {
  // S√©lection des √©l√©ments n√©cessaires dans le DOM
  const tbody = document.querySelector('#tableVisites tbody'); // Table body pour afficher les visites
  const form = document.getElementById('filtreForm'); // Formulaire de filtre
  const dateInput = document.getElementById('date'); // Champ de saisie pour la date
  const resetBtn = document.getElementById('resetBtn'); // Bouton de r√©initialisation

  let toutesLesVisites = []; // Tableau pour stocker toutes les visites

  // üîÑ Fonction utilitaire pour r√©cup√©rer le motif (formation ou personnel) bas√© sur l'ID
  async function getMotifData(id) {
    if (!id || isNaN(id)) {
      console.warn("‚ö†Ô∏è ID du motif invalide :", id);
      return { type: 'Inconnu', local: '‚Äî' }; // Si l'ID est invalide, retourner une valeur par d√©faut
    }

    // 1. Essayer de r√©cup√©rer la formation correspondant √† l'ID
    try {
      const res = await fetch(`${ENDPOINTS.formations}/${id}`);
      if (res.ok) {
        const data = await res.json();
        return {
          type: 'Formation',
          local: data.acf['local'] || data.title?.rendered || '‚Äî' // Extraire les informations du local de la formation
        };
      }
    } catch (err) {}

    // 2. Si la formation √©choue, essayer de r√©cup√©rer les informations du personnel
    try {
      const res = await fetch(`${ENDPOINTS.personnels}/${id}`);
      if (res.ok) {
        const data = await res.json();
        return {
          type: 'Personnel',
          local: data.acf['local-personnel'] || data.title?.rendered || '‚Äî' // Extraire les informations du local du personnel
        };
      }
    } catch (err) {}

    return { type: 'Inconnu', local: '‚Äî' }; // Si aucune des deux tentatives n'a r√©ussi, retourner des valeurs par d√©faut
  }

  // üîÑ Fonction pour charger un visiteur par son ID
  async function getVisiteurData(id) {
    try {
      const res = await fetch(`${ENDPOINTS.visiteurs}/${id}`);
      const data = await res.json();
      return {
        nom: data.acf?.['nom-visiteur'] || '‚Äî', // Nom du visiteur, ou '‚Äî' si non d√©fini
        prenom: data.acf?.['prenom-visiteur'] || '‚Äî' // Pr√©nom du visiteur, ou '‚Äî' si non d√©fini
      };
    } catch (err) {
      return { nom: '‚Äî', prenom: '‚Äî' }; // En cas d'erreur, retourner des valeurs par d√©faut
    }
  }

  // üîÅ Fonction pour charger toutes les visites depuis l'API
  async function chargerVisites() {
    try {
      const res = await fetch(`${ENDPOINTS.visites}`);
      const data = await res.json();
      toutesLesVisites = data; // Stocker toutes les visites r√©cup√©r√©es
      afficherVisites(toutesLesVisites); // Afficher les visites dans le tableau
    } catch (err) {
      console.error('Erreur chargement :', err); // Afficher l'erreur dans la console
      tbody.innerHTML = `<tr><td colspan="6">Erreur de chargement.</td></tr>`; // Message d'erreur si l'API √©choue
    }
  }

  // üìã Fonction pour afficher les visites dans le tableau
  async function afficherVisites(visites) {
    const visitesCompletes = visites.filter(v => v.acf?.date_entree && v.acf?.date_sortie); // Filtrer les visites compl√®tes (avec entr√©e et sortie)

    if (visitesCompletes.length === 0) {
      tbody.innerHTML = `<tr><td colspan="6">Aucune visite compl√®te trouv√©e.</td></tr>`; // Si aucune visite compl√®te n'est trouv√©e
      return;
    }

    tbody.innerHTML = ''; // R√©initialiser le contenu du tableau

    for (const v of visitesCompletes) {
      const acf = v.acf;
      const visiteurId = parseInt(acf?.visiteur?.[0]); // ID du visiteur
      const motifId = parseInt(acf?.['motif-visite']?.[0]); // ID du motif (formation ou personnel)

      // R√©cup√©rer les donn√©es du visiteur et du motif
      const visiteur = await getVisiteurData(visiteurId);
      const motif = await getMotifData(motifId);

      // Formatage des dates d'entr√©e et de sortie
      const entree = new Date(acf.date_entree).toLocaleString();
      const sortie = new Date(acf.date_sortie).toLocaleString();

      // Cr√©ation d'une ligne pour chaque visite dans le tableau
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${visiteur.nom}</td>
        <td>${visiteur.prenom}</td>
        <td>${motif.type}</td>
        <td>${entree}</td>
        <td>${sortie}</td>
        <td>${motif.local}</td>
      `;
      tbody.appendChild(tr); // Ajouter la ligne au tableau
    }
  }

  // üîç √âv√©nement de filtrage par date
  form.addEventListener('submit', (e) => {
    e.preventDefault(); // Emp√™cher l'envoi du formulaire
    const dateChoisie = dateInput.value; // R√©cup√©rer la date choisie
    if (!dateChoisie) return;

    // Filtrer les visites par la date d'entr√©e
    const filtr√©es = toutesLesVisites.filter(v => v.acf?.date_entree?.startsWith(dateChoisie));
    afficherVisites(filtr√©es); // Afficher les visites filtr√©es
  });

  // üîÅ √âv√©nement de r√©initialisation du filtre
  resetBtn.addEventListener('click', () => {
    dateInput.value = ''; // R√©initialiser le champ de date
    afficherVisites(toutesLesVisites); // Afficher toutes les visites sans filtre
  });

  // üì• Fonction d'exportation en CSV
  document.getElementById('exportBtn').addEventListener('click', () => {
    const rows = document.querySelectorAll('#tableVisites tr'); // S√©lectionner toutes les lignes du tableau
    if (rows.length <= 1) {
      alert("Aucune donn√©e √† exporter."); // Si aucune donn√©e, afficher un message
      return;
    }

    let csv = "";
    rows.forEach(row => {
      const cells = row.querySelectorAll('td, th'); // S√©lectionner toutes les cellules de la ligne
      const values = Array.from(cells).map(cell =>
        `"${cell.textContent.replace(/"/g, '""')}"` // √âchapper les guillemets doubles dans le texte
      );
      csv += values.join(',') + "\n"; // Ajouter les valeurs √† la cha√Æne CSV
    });

    // Cr√©er un fichier Blob de type CSV et g√©n√©rer un lien pour le t√©l√©chargement
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `historique_visites_${new Date().toISOString().slice(0,10)}.csv`; // Nom du fichier CSV
    document.body.appendChild(a);
    a.click(); // Simuler un clic pour t√©l√©charger le fichier
    document.body.removeChild(a); // Supprimer le lien une fois le t√©l√©chargement termin√©
  });

  // üöÄ Initialisation : charger les visites au d√©marrage
  chargerVisites();
});
